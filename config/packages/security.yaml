security:
  encoders:
    App\Document\User\User:
      algorithm: auto
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    chain_provider:
      chain:
        providers: [ db_username, db_email ]
    db_username:
      mongodb: { class: App\Document\User\User, property: username }
    db_email:
      mongodb: { class: App\Document\User\User, property: email }
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      stateless: true
      anonymous: true
      lazy: true
      provider: chain_provider
      logout: ~
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator
      json_login:
        check_path: /login
        success_handler: App\Security\AuthenticationCustomSuccessHandler
        failure_handler: App\Security\AuthenticationCustomFailureHandler

    api:
      pattern: ^/api
      stateless: true
      provider: chain_provider
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
  access_control:
  # - { path: ^/admin, roles: ROLE_ADMIN }
  # - { path: ^/profile, roles: ROLE_USER }
#    - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
#    - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }