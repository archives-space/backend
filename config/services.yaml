# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  web_base_url: '%env(WEB_BASE_URL)%'
  env(MONGODB_URL): ''
  env(MONGODB_DB): ''

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'
      - '../src/Tests/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller/'
    tags: [ 'controller.service_arguments' ]

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones
  acme_api.event.jwt_created_listener:
    class: App\EventListener\JWTCreatedListener
    arguments: [ '@request_stack' ]
    tags:
      - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

  App\EventListener\Document\Catalog\PictureUpdate:
    tags:
      - name: 'doctrine.odm.entity_listener'
        event: 'postPersist'
        entity: 'App\Document\Catalog\Picture'

        # these are other options that you may define if needed

        # set the 'lazy' option to TRUE to only instantiate listeners when they are used
        # lazy: true

        # set the 'entity_manager' option if the listener is not associated to the default manager
        # entity_manager: 'custom'

        # by default, Symfony looks for a method called after the event (e.g. postUpdate())
        # if it doesn't exist, it tries to execute the '__invoke()' method, but you can
        # configure a custom method name with the 'method' option
        # method: 'checkUserChanges'
